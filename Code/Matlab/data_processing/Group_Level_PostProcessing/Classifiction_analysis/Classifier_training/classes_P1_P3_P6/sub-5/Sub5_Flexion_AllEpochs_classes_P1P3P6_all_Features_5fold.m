function [trainedClassifier, validationAccuracy] = ...
    Sub5_Flexion_AllEpochs_classes_P1P3P6_all_Features_5fold(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% Returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: A table containing the same predictor and response
%       columns as those imported into the app.
%
%
%  Output:
%      trainedClassifier: A struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: A function to make predictions on new
%       data.
%
%      validationAccuracy: A double representing the validation accuracy as
%       a percentage. In the app, the Models pane displays the validation
%       accuracy for each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   [yfit,scores] = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 06-Jan-2025 16:14:10


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Left_Dorsal_ACC_delta_IC4', 'Left_Dorsal_ACC_theta_IC4', 'Left_Dorsal_ACC_alpha_IC4', 'Left_Dorsal_ACC_beta_IC4', 'Left_Dorsal_ACC_gamma_IC4', 'Left_Dorsal_ACC_delta_IC38', 'Left_Dorsal_ACC_theta_IC38', 'Left_Dorsal_ACC_alpha_IC38', 'Left_Dorsal_ACC_beta_IC38', 'Left_Dorsal_ACC_gamma_IC38', 'Right_PreMot_SuppMot_delta_IC19', 'Right_PreMot_SuppMot_theta_IC19', 'Right_PreMot_SuppMot_alpha_IC19', 'Right_PreMot_SuppMot_beta_IC19', 'Right_PreMot_SuppMot_gamma_IC19', 'Right_PreMot_SuppMot_delta_IC29', 'Right_PreMot_SuppMot_theta_IC29', 'Right_PreMot_SuppMot_alpha_IC29', 'Right_PreMot_SuppMot_beta_IC29', 'Right_PreMot_SuppMot_gamma_IC29', 'Right_PreMot_SuppMot_delta_IC34', 'Right_PreMot_SuppMot_theta_IC34', 'Right_PreMot_SuppMot_alpha_IC34', 'Right_PreMot_SuppMot_beta_IC34', 'Right_PreMot_SuppMot_gamma_IC34', 'Right_PreMot_SuppMot_delta_IC37', 'Right_PreMot_SuppMot_theta_IC37', 'Right_PreMot_SuppMot_alpha_IC37', 'Right_PreMot_SuppMot_beta_IC37', 'Right_PreMot_SuppMot_gamma_IC37', 'Right_VisMotor_delta_IC5', 'Right_VisMotor_theta_IC5', 'Right_VisMotor_alpha_IC5', 'Right_VisMotor_beta_IC5', 'Right_VisMotor_gamma_IC5', 'Right_VisMotor_delta_IC7', 'Right_VisMotor_theta_IC7', 'Right_VisMotor_alpha_IC7', 'Right_VisMotor_beta_IC7', 'Right_VisMotor_gamma_IC7', 'Right_PrimVisual_delta_IC8', 'Right_PrimVisual_theta_IC8', 'Right_PrimVisual_alpha_IC8', 'Right_PrimVisual_beta_IC8', 'Right_PrimVisual_gamma_IC8'};
predictors = inputTable(:, predictorNames);
response = inputTable.Pressure;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];
classNames = categorical({'P1'; 'P3'; 'P6'});

% Train a classifier
% This code specifies all the classifier options and trains the classifier.

% Expand the Distribution Names per predictor
% Numerical predictors are assigned either Gaussian or Kernel distribution and categorical predictors are assigned mvmn distribution
% Gaussian is replaced with Normal when passing to the fitcnb function
distributionNames =  repmat({'Kernel'}, 1, length(isCategoricalPredictor));
distributionNames(isCategoricalPredictor) = {'mvmn'};

if any(strcmp(distributionNames,'Kernel'))
    classificationNaiveBayes = fitcnb(...
        predictors, ...
        response, ...
        'Kernel', 'Triangle', ...
        'Support', 'Unbounded', ...
        'Standardize', true, ...
        'DistributionNames', distributionNames, ...
        'ClassNames', classNames);
else
    classificationNaiveBayes = fitcnb(...
        predictors, ...
        response, ...
        'DistributionNames', distributionNames, ...
        'ClassNames', classNames);
end

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
naiveBayesPredictFcn = @(x) predict(classificationNaiveBayes, x);
trainedClassifier.predictFcn = @(x) naiveBayesPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'Left_Dorsal_ACC_delta_IC4', 'Left_Dorsal_ACC_theta_IC4', 'Left_Dorsal_ACC_alpha_IC4', 'Left_Dorsal_ACC_beta_IC4', 'Left_Dorsal_ACC_gamma_IC4', 'Left_Dorsal_ACC_delta_IC38', 'Left_Dorsal_ACC_theta_IC38', 'Left_Dorsal_ACC_alpha_IC38', 'Left_Dorsal_ACC_beta_IC38', 'Left_Dorsal_ACC_gamma_IC38', 'Right_PreMot_SuppMot_delta_IC19', 'Right_PreMot_SuppMot_theta_IC19', 'Right_PreMot_SuppMot_alpha_IC19', 'Right_PreMot_SuppMot_beta_IC19', 'Right_PreMot_SuppMot_gamma_IC19', 'Right_PreMot_SuppMot_delta_IC29', 'Right_PreMot_SuppMot_theta_IC29', 'Right_PreMot_SuppMot_alpha_IC29', 'Right_PreMot_SuppMot_beta_IC29', 'Right_PreMot_SuppMot_gamma_IC29', 'Right_PreMot_SuppMot_delta_IC34', 'Right_PreMot_SuppMot_theta_IC34', 'Right_PreMot_SuppMot_alpha_IC34', 'Right_PreMot_SuppMot_beta_IC34', 'Right_PreMot_SuppMot_gamma_IC34', 'Right_PreMot_SuppMot_delta_IC37', 'Right_PreMot_SuppMot_theta_IC37', 'Right_PreMot_SuppMot_alpha_IC37', 'Right_PreMot_SuppMot_beta_IC37', 'Right_PreMot_SuppMot_gamma_IC37', 'Right_VisMotor_delta_IC5', 'Right_VisMotor_theta_IC5', 'Right_VisMotor_alpha_IC5', 'Right_VisMotor_beta_IC5', 'Right_VisMotor_gamma_IC5', 'Right_VisMotor_delta_IC7', 'Right_VisMotor_theta_IC7', 'Right_VisMotor_alpha_IC7', 'Right_VisMotor_beta_IC7', 'Right_VisMotor_gamma_IC7', 'Right_PrimVisual_delta_IC8', 'Right_PrimVisual_theta_IC8', 'Right_PrimVisual_alpha_IC8', 'Right_PrimVisual_beta_IC8', 'Right_PrimVisual_gamma_IC8'};
trainedClassifier.ClassificationNaiveBayes = classificationNaiveBayes;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2024b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  [yfit,scores] = c.predictFcn(T) \nreplace ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Left_Dorsal_ACC_delta_IC4', 'Left_Dorsal_ACC_theta_IC4', 'Left_Dorsal_ACC_alpha_IC4', 'Left_Dorsal_ACC_beta_IC4', 'Left_Dorsal_ACC_gamma_IC4', 'Left_Dorsal_ACC_delta_IC38', 'Left_Dorsal_ACC_theta_IC38', 'Left_Dorsal_ACC_alpha_IC38', 'Left_Dorsal_ACC_beta_IC38', 'Left_Dorsal_ACC_gamma_IC38', 'Right_PreMot_SuppMot_delta_IC19', 'Right_PreMot_SuppMot_theta_IC19', 'Right_PreMot_SuppMot_alpha_IC19', 'Right_PreMot_SuppMot_beta_IC19', 'Right_PreMot_SuppMot_gamma_IC19', 'Right_PreMot_SuppMot_delta_IC29', 'Right_PreMot_SuppMot_theta_IC29', 'Right_PreMot_SuppMot_alpha_IC29', 'Right_PreMot_SuppMot_beta_IC29', 'Right_PreMot_SuppMot_gamma_IC29', 'Right_PreMot_SuppMot_delta_IC34', 'Right_PreMot_SuppMot_theta_IC34', 'Right_PreMot_SuppMot_alpha_IC34', 'Right_PreMot_SuppMot_beta_IC34', 'Right_PreMot_SuppMot_gamma_IC34', 'Right_PreMot_SuppMot_delta_IC37', 'Right_PreMot_SuppMot_theta_IC37', 'Right_PreMot_SuppMot_alpha_IC37', 'Right_PreMot_SuppMot_beta_IC37', 'Right_PreMot_SuppMot_gamma_IC37', 'Right_VisMotor_delta_IC5', 'Right_VisMotor_theta_IC5', 'Right_VisMotor_alpha_IC5', 'Right_VisMotor_beta_IC5', 'Right_VisMotor_gamma_IC5', 'Right_VisMotor_delta_IC7', 'Right_VisMotor_theta_IC7', 'Right_VisMotor_alpha_IC7', 'Right_VisMotor_beta_IC7', 'Right_VisMotor_gamma_IC7', 'Right_PrimVisual_delta_IC8', 'Right_PrimVisual_theta_IC8', 'Right_PrimVisual_alpha_IC8', 'Right_PrimVisual_beta_IC8', 'Right_PrimVisual_gamma_IC8'};
predictors = inputTable(:, predictorNames);
response = inputTable.Pressure;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];
classNames = categorical({'P1'; 'P3'; 'P6'});

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationNaiveBayes, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
